<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hilfloser</title>
  
  <subtitle>Hilfloser</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-03-11T01:51:38.204Z</updated>
  <id>http://yoursite.com/</id>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ARM汇编</title>
    <link href="http://yoursite.com/2019/03/11/ARM%E6%B1%87%E7%BC%96/"/>
    <id>http://yoursite.com/2019/03/11/ARM汇编/</id>
    <published>2019-03-11T01:03:27.000Z</published>
    <updated>2019-03-11T01:51:38.204Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>Part 1：ARM汇编介绍</p></li><li><p>Part 2：数据类型寄存器</p></li><li><p>Part 3: ARM指令集</p></li><li><p>Part 4: 内存相关指令：加载以及存储</p></li><li><p>Part 5：重复性加载及存储</p></li><li><p>Part 6: 分支和条件执行</p></li><li><p>Part 7：栈以及函数</p><hr></li></ul><p><strong>ARM&amp;X86cpu的一些区别：</strong></p><p>Intel是一个CISC（Complex Instruction Set Computing，复杂指令集）处理器。因此它具有更庞大，<strong>功能更丰富的指令集，并且允许指令进行一些复杂的访存操作。</strong>它也因此具有支持更多的复杂操作和寻址方式，并且寄存器的数量比ARM要少的多。CISC处理器一般用在通用PC，工作站和服务器中。</p><p>ARM是一个RISC（Reduced Instruction Set Computing，精简指令集）处理器。因此它拥有一套精简的指令集（100个左右，甚至更少的指令）以及比CISC处理器更多的通用寄存器。与Intel处理器不同，<strong>ARM指令只处理寄存器中的数据，并使用了load/store结构访问存储器</strong>，也就是说只有load/store指令可以访问存储器。所以如果我们要增加某个内存地址中保存的值，至少需要三种类型的指令（load指令、加法指令和store指令），首先我们需要使用load指令将指定地址内存中的值加载到寄存器中，然后使用加法指令增加寄存器中的值，然后用store指令将寄存器中的值写回内存。</p><p>#简单的说  ARM执行一个操作，需要的步骤更多。而x86的直接就能进行访存</p><p><strong>ARM优势</strong></p><p>一个重要的优势是指令可以被更快的执行（RISC处理器通过引入流水线机制，减少每个指令的占用的CPU的时钟周期来缩短执行时间）。它的劣势也很明显，较少的指令增加了软件（事实上是编译器）的复杂性。另一个重要的事实是，ARM具有两种运行模式（可以类比x86的实模式和保护模式），ARM模式和Thumb模式。</p><p>ARM也更加节省能耗</p><p><em>简介剪贴自：<a href="https://azeria-labs.com/writing-arm-assembly-part-1/" target="_blank" rel="noopener">https://azeria-labs.com/writing-arm-assembly-part-1/</a></em></p><p>ARM和X86的差异：<a href="https://www.cnblogs.com/bitter/p/4023176.html" target="_blank" rel="noopener">https://www.cnblogs.com/bitter/p/4023176.html</a></p><h4 id="ARM汇编数据类型基础"><a href="#ARM汇编数据类型基础" class="headerlink" title="ARM汇编数据类型基础"></a>ARM汇编数据类型基础</h4><p>与高级语言类似，ARM也支持操作不同的数据类型。</p><p>被加载或者存储的数据类型可以是无符号（有符号）的字(words，四字节)，半字(halfwords，两字节)，或者字节(bytes)。这些数据类型在汇编语言中的扩展后缀为<code>-h</code>或者<code>-sh</code>对应着半字，<code>-b</code>或者<code>-sb</code>对应着字节，但是对于字并没有对应的扩展。无符号类型与有符号类型的差别是：</p><ul><li>符号数据类型可以包含正负数所以数值范围上更低些</li><li>无符号数据类型可以放得下很大的正数但是放不了负数</li></ul><p>这有一些要求使用对应数据类型做存取操作的汇编指令示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ldr = 加载字，宽度四字节</span><br><span class="line">ldrh = 加载无符号的半字，宽度两字节</span><br><span class="line">ldrsh = 加载有符号的半字，宽度两字节</span><br><span class="line">ldrb = 加载无符号的字节</span><br><span class="line">ldrsb = 加载有符号的字节</span><br><span class="line"></span><br><span class="line">str = 存储字，宽度四字节</span><br><span class="line">strh = 存储无符号的半字，宽度两字节</span><br><span class="line">strsh = 存储有符号的半字，宽度两字节</span><br><span class="line">strb = 存储无符号的字节</span><br><span class="line">strsb = 存储有符号的字节</span><br></pre></td></tr></table></figure><h4 id="字节序"><a href="#字节序" class="headerlink" title="字节序"></a>字节序</h4><p>在内存中有两种字节排布顺序，大端序(BE)或者小端序(LE)。两者的主要不同是对象中的每个字节在内存中的存储顺序存在差异。一般X86中是<strong>小端序，最低的字节存储在最低的地址上</strong>。在大端机中最高的字节存储在最低的地址上。</p><p><img src="https:////upload-images.jianshu.io/upload_images/6189910-509c68c0dbfb1073.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/394" alt="img"></p><p>在版本3之前，ARM使用的是小端序，但在这之后就都是使用大端序了，但也允许切换回小端序。在我们样例代码所在的ARMv6中，指令代码是以[小端序排列对齐]。但是数据访问时采取大端序还是小端序使用程序状态寄存器(CPSR)的第9比特位来决定的。</p><p><img src="https:////upload-images.jianshu.io/upload_images/6189910-cd762a9689c3da1f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700" alt="img"></p><p>image</p><h4 id="ARM寄存器"><a href="#ARM寄存器" class="headerlink" title="ARM寄存器"></a>ARM寄存器</h4><p>寄存器的数量由ARM版本决定。根据<a href="https://link.jianshu.com?t=http://infocenter.arm.com/help/topic/com.arm.doc.dui0473c/Babdfiih.html" target="_blank" rel="noopener">ARM参考手册</a>，在ARMv6-M与ARMv7-M的处理器中有30个32bit位宽度的通用寄存器。前16个寄存器是用户层可访问控制的，其他的寄存器在高权限进程中可以访问（但ARMv6-M与ARMv7-M除外）。我们仅介绍可以在任何权限模式下访问的16个寄存器。这16个寄存器分为两组：通用寄存器与有特殊含义的寄存器。</p><table><thead><tr><th>#</th><th>别名</th><th>用途</th></tr></thead><tbody><tr><td>R0</td><td>-</td><td>通用寄存器</td></tr><tr><td>R1</td><td>-</td><td>通用寄存器</td></tr><tr><td>R2</td><td>-</td><td>通用寄存器</td></tr><tr><td>R3</td><td>-</td><td>通用寄存器</td></tr><tr><td>R4</td><td>-</td><td>通用寄存器</td></tr><tr><td>R5</td><td>-</td><td>通用寄存器</td></tr><tr><td>R6</td><td>-</td><td>通用寄存器</td></tr><tr><td>R7</td><td>-</td><td>一般放系统调用号</td></tr><tr><td>R8</td><td>-</td><td>通用寄存器</td></tr><tr><td>R9</td><td>-</td><td>通用寄存器</td></tr><tr><td>R10</td><td>-</td><td>通用寄存器</td></tr><tr><td>R11</td><td>FP</td><td>栈帧指针</td></tr><tr><td>R12</td><td>IP</td><td>内部程序调用</td></tr><tr><td>R13</td><td>SP</td><td>栈指针</td></tr><tr><td>R14</td><td>LR</td><td>链接寄存器(一般存放函数返回地址)</td></tr><tr><td>R15</td><td>PC</td><td>程序计数寄存器</td></tr><tr><td>CPSR</td><td>-</td><td>当前程序状态寄存器</td></tr></tbody></table><p>下面这张表是ARM架构与寄存器与Intel架构寄存器的关系：</p><table><thead><tr><th>ARM</th><th style="text-align:left">描述</th><th>X86</th></tr></thead><tbody><tr><td>R0</td><td style="text-align:left">通用寄存器</td><td>EAX</td></tr><tr><td>R1-R5</td><td style="text-align:left">通用寄存器</td><td>EBX,ECX,EDX,ESI,EDI</td></tr><tr><td>R6-R10</td><td style="text-align:left">通用寄存器</td><td>-</td></tr><tr><td>R11(FP)</td><td style="text-align:left">栈帧指针</td><td>EBP</td></tr><tr><td>R12</td><td style="text-align:left">内部程序调用</td><td>-</td></tr><tr><td>R13(SP)</td><td style="text-align:left">栈指针</td><td>ESP</td></tr><tr><td>R14(LR)</td><td style="text-align:left">链接寄存器</td><td>-</td></tr><tr><td>R14(LR)</td><td style="text-align:left">&lt;-程序计数器/机器码指针-&gt;</td><td>EIP</td></tr><tr><td>CPSR</td><td style="text-align:left">程序状态寄存器</td><td>EFLAGS</td></tr></tbody></table><p>R0-R12：用来在通用操作中存储临时的值，指针等。R0被用来存储函数调用的返回值。R7经常被用作存储系统调用号，R11存放着帮助我们找到栈帧边界的指针（之后会讲）。以及，在ARM的函数调用约定中，前四个参数按顺序存放在R0-R3中。</p><p>R13：SP(栈指针）。栈指针寄存器用来指向当前的栈顶。栈是一片来存储函数调用中相关数据的内存，在函数返回时会被修改为对应的栈指针。栈指针用来帮助在栈上申请数据空间。比如说你要申请一个字的大小，就会将栈指针减4，再将数据放入之前所指向的位置。</p><p>R14：LR(链接寄存器)。当一个函数调用发生，链接寄存器就被用来记录函数调用发生所在位置的下一条指令的地址。这么做允许我们快速的从子函数返回到父函数。</p><p>R15：PC(程序计数器)。程序计数器是一个在程序指令执行时自增的计数器。它的大小在ARM模式下总是4字节对齐，在Thumb模式下总是两字节对齐。当执行一个分支指令时，PC存储目的地址。在程序执行中，ARM模式下的PC存储着当前指令加8(两条ARM指令后)的位置，Thumb(v1)模式下的PC存储着当前指令加4(两条Thumb指令后)的位置。这也是X86与ARM在PC上的主要不同之处。</p><p>我们可以通过调试来观察PC的行为。我们的程序中将PC的值存到R0中同时包含了两条其他指令，来看看会发生什么。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.section .text</span><br><span class="line">.global _start</span><br><span class="line"></span><br><span class="line">_start:</span><br><span class="line"> mov r0, pc</span><br><span class="line"> mov r1, #2</span><br><span class="line"> add r2, r1, r1</span><br><span class="line"> bkpt</span><br></pre></td></tr></table></figure><p>在GDB中，我们开始调试这段汇编代码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">gef&gt;</span> br _start</span><br><span class="line">Breakpoint 1 at 0x8054</span><br><span class="line"><span class="meta">gef&gt;</span> run</span><br></pre></td></tr></table></figure><p>在开始执行触发断点后，首先会在GDB中看到:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$r0 0x00000000   $r1 0x00000000   $r2 0x00000000   $r3 0x00000000 </span><br><span class="line">$r4 0x00000000   $r5 0x00000000   $r6 0x00000000   $r7 0x00000000 </span><br><span class="line">$r8 0x00000000   $r9 0x00000000   $r10 0x00000000  $r11 0x00000000 </span><br><span class="line">$r12 0x00000000  $sp 0xbefff7e0   $lr 0x00000000   $pc 0x00008054 </span><br><span class="line">$cpsr 0x00000010 </span><br><span class="line"></span><br><span class="line">0x8054 &lt;_start&gt; mov r0, pc     &lt;- $pc</span><br><span class="line">0x8058 &lt;_start+4&gt; mov r0, #2</span><br><span class="line">0x805c &lt;_start+8&gt; add r1, r0, r0</span><br><span class="line">0x8060 &lt;_start+12&gt; bkpt 0x0000</span><br><span class="line">0x8064 andeq r1, r0, r1, asr #10</span><br><span class="line">0x8068 cmnvs r5, r0, lsl #2</span><br><span class="line">0x806c tsteq r0, r2, ror #18</span><br><span class="line">0x8070 andeq r0, r0, r11</span><br><span class="line">0x8074 tsteq r8, r6, lsl #6</span><br></pre></td></tr></table></figure><p>可以看到在程序的开始PC指向0x8054这个位置即第一条要被执行的指令，那么此时我们使用GDB命令si，执行下一条机器码。下一条指令是把PC的值放到R0寄存器中，所以应该是0x8054么？来看看调试器的结果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$r0 0x0000805c   $r1 0x00000000   $r2 0x00000000   $r3 0x00000000 </span><br><span class="line">$r4 0x00000000   $r5 0x00000000   $r6 0x00000000   $r7 0x00000000 </span><br><span class="line">$r8 0x00000000   $r9 0x00000000   $r10 0x00000000  $r11 0x00000000 </span><br><span class="line">$r12 0x00000000  $sp 0xbefff7e0   $lr 0x00000000   $pc 0x00008058 </span><br><span class="line">$cpsr 0x00000010</span><br><span class="line"></span><br><span class="line">0x8058 &lt;_start+4&gt; mov r0, #2       &lt;- $pc</span><br><span class="line">0x805c &lt;_start+8&gt; add r1, r0, r0</span><br><span class="line">0x8060 &lt;_start+12&gt; bkpt 0x0000</span><br><span class="line">0x8064 andeq r1, r0, r1, asr #10</span><br><span class="line">0x8068 cmnvs r5, r0, lsl #2</span><br><span class="line">0x806c tsteq r0, r2, ror #18</span><br><span class="line">0x8070 andeq r0, r0, r11</span><br><span class="line">0x8074 tsteq r8, r6, lsl #6</span><br><span class="line">0x8078 adfcssp f0, f0, #4.0</span><br></pre></td></tr></table></figure><p>当然不是，在执行0x8054这条位置的机器码时，PC已经读到了两条指令后的位置也就是0x805c(见R0寄存器)。所以我们以为直接读取PC寄存器的值时，它指向的是下一条指令的位置。但是调试器告诉我们，PC指向当前指令向后两条机器码的位置。这是因为早期的ARM处理器总是会先获取当前位置后两条的机器码。这么做的原因也是确保与早期处理器的兼容性。</p><h4 id="当前程序状态寄存器（CPSR）"><a href="#当前程序状态寄存器（CPSR）" class="headerlink" title="当前程序状态寄存器（CPSR）"></a>当前程序状态寄存器（CPSR）</h4><p>当你用GDB调试ARM程序的的时候你能会可以看见Flags这一栏（GDB配置插件GEF后就可以看见了，或者直接在GDB里面输入flags也可以）。</p><p><img src="https:////upload-images.jianshu.io/upload_images/6189910-f2017471444cb97e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/954" alt="img"></p><p>image</p><p>图中寄存器<code>$CSPR</code>显示了当前状态寄存器的值，Flags里面出现的thumb，fast，interrupt，overflow，carry，zero，negative就是来源于CSPR寄存器中对应比特位的值。ARM架构的N，Z，C，V与X86架构EFLAG中的SF，ZF，CF，OF相对应。这些比特位在汇编级别的条件执行或者循环的跳出时，被用作判断的依据。</p><p><em>CF</em>是进位标志;PF是奇偶标志;AF是辅助进位标志;<em>ZF</em>是零标志;<em>SF</em>是符号标志;<em>OF</em>是溢出标志。</p><p><img src="https:////upload-images.jianshu.io/upload_images/6189910-680c3708bee87309.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/800" alt="img"></p><p>上图展示了32位的CPSR寄存器的比特位含义，左边是最大比特位，右边是最小比特位。每个单元代表一个比特。这一个个比特的含义都很丰富：</p><table><thead><tr><th>标记</th><th>含义</th></tr></thead><tbody><tr><td>N(Negative)</td><td>指令结果为负值时置1</td></tr><tr><td>Z(Zero)</td><td>指令结果为零值时置1</td></tr><tr><td>C(Carry)</td><td>对于加法有进位则置1，对于减法有借位则置0</td></tr><tr><td>V(Overflow)</td><td>指令结果不能用32位的二进制补码存储，即发生了溢出时置1</td></tr><tr><td>E(Endian)</td><td>小端序置0，大端序置1</td></tr><tr><td>T(Thumb)</td><td>当为Thumb模式时置1，ARM模式置0</td></tr><tr><td>M(Mode)</td><td>当前的权限模式（用户态，内核态）</td></tr><tr><td>J(Jazelle)</td><td>允许ARM处理器去以硬件执行java字节码的状态标示</td></tr></tbody></table><p>假设我们用CMP指令去比较1和2，结果会是一个负数因为1-2=-1。然而当我们反过来用2和1比较，C位将被设定，因为在一个较大的数上减了较小的数，没有发生借位。当我们比较两个相同的数比如2和2时，由于结果是0，Z标志位将被置一。注意CMP指令中被使用的寄存器的值并不会被修改，其计算结果仅仅影响到CPSR寄存器中的状态位。</p><p>在开了GEF插件的GDB中，计算结果如下图：在这里我们比较的两个寄存器是R1和R0，所以执行后的flag状态如下图。</p><p><img src="https:////upload-images.jianshu.io/upload_images/6189910-0396898fc1d9c10a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/954" alt="img"></p><p>Carry位Flag被设置的原因是CMP R1,R0会去拿4和2做比较。因为我们用以个较大的数字去减一个较少的数字，没有发生借位。Carry位便被置1。相反的，如果是CMP R0,R1那么Negative位会被置一。</p><p>原作链接：<a href="https://www.jianshu.com/p/a28638589d55" target="_blank" rel="noopener">https://www.jianshu.com/p/a28638589d55</a></p><h3 id="ARM模式与THUMB模式"><a href="#ARM模式与THUMB模式" class="headerlink" title="ARM模式与THUMB模式"></a>ARM模式与THUMB模式</h3><p>ARM处理器有两个主要的操作状态，ARM模式以及Thumb模式(Jazelle模式先不考虑)。这些模式与特权模式并不冲突。SVC模式既可以在ARM下调用也可以在Thumb下调用。只不过两种状态的主要不同是指令集的不同，ARM模式的指令集宽度是32位而Thumb是16位宽度(但也可以是32位)。知道何时以及如何使用Thumb模式对于ARM漏洞利用的开发尤其重要。当我们写ARM的shellcode时候，我们需要尽可能的少用NULL以及使用16位宽度的Thumb指令以精简代码。</p><p>不同版本ARM，其调用约定不完全相同，而且支持的Thumb指令集也是不完全相同。在某些版本，ARM提出了扩展型Thumb指令集(也叫Thumbv2)，允许执行32位宽的Thumb指令以及之前版本不支持的条件执行。为了在Thumb模式下使用条件执行指令，Thumb提出了”IT”分支指令。然而，这条指令在之后的版本又被更改移除了，说是为了让一些事情变得更加简单方便。并不清楚各个版本的ARM架构所支持的具体的ARM/Thumb指令集，而且我也的确不想知道。我觉得你也应该不用深究这个问题。因为你只需要知道你设备上的关键ARM版本所支持的Thumb指令集就可以了。以及<a href="https://link.jianshu.com?t=http://infocenter.arm.com/help/index.jsp" target="_blank" rel="noopener">ARM信息中心</a>可以帮你弄清楚你的ARM版本到底是多少。</p><p>就像之前说到的，Thumb也有很多不同的版本。不过不同的名字仅仅是为了区分不同版本的Thumb指令集而已(也就是对于处理器来说，这些指令永远都是Thumb指令)。</p><ul><li>Thumb-1(16位宽指令集)：在ARMv6以及更早期的版本上使用。</li><li>Thumb-2(16位/32位宽指令集)：在Thumb-1基础上扩展的更多的指令集(在ARMv6T2以及ARMv7即很多32位Android手机所支持的架构上使用)</li><li>Thumb-EE：包括一些改变以及对于动态生成代码的补充(即那些在设备上执行前或者运行时编译的代码)</li></ul><p>ARM与Thumb的不同之处在于：</p><ul><li>对于<strong>条件执行</strong>指令（<strong>不是条件跳转</strong>指令）：<strong>所有的ARM状态指令都支持条件执行</strong>。一些版本的ARM处理器上允许在Thumb模式下通过IT汇编指令进行条件执行。条件执行减少了要被执行的指令数量，以及用来做分支跳转的语句，所以具有更高的代码密度。</li><li>ARM模式与Thumb模式的32位指令：Thumb的32位汇编指令都有类似于<code>a.w</code>的扩展后缀。</li><li>桶型移位是另一种独特的ARM模式特性。它可以被用来减少指令数量。比如说，为了减少使用乘法所需的两条指令(乘法操作需要先乘2然后再把结果用MOV存储到另一个寄存器中)，就可以使用在MOV中自带移位乘法操作的左移指令(<code>Mov R1, R0, LSL #1</code>)。</li></ul><p>在ARM模式与Thumb模式间切换的话，以下两个条件之一必须满足：</p><ul><li>我们可以在使用分支跳转指令BX(branch and exchange)或者分支链接跳转指令BLX(branch,link and exchange)时，将目的寄存器的最低位置为1。之后的代码执行就会在Thumb模式下进行。你也许会好奇这样做目标跳转地址不就有对齐问题了么，因为代码都是2字节或者4字节对齐的？但事实上这并不会造成问题，因为处理器会直接忽略最低比特位的标识。更多的细节我们会在第6篇中解释。</li><li>我们之前有说过，在CPSR当前程序状态寄存器中，T标志位用来代表当前程序是不是在Thumb模式下运行的。</li></ul><h3 id="ARM指令集规律含义"><a href="#ARM指令集规律含义" class="headerlink" title="ARM指令集规律含义"></a>ARM指令集规律含义</h3><p>这一节的目的是简要的介绍ARM的通用指令集。知道每一句汇编指令是怎么操作使用，相互关联，最终组成程序是很重要的。之前说过，汇编语言是由构建机器码块的指令组成。所以ARM指令通常由助记符外加一到两个跟在后面的操作符组成，如下面的模板所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MNEMONIC&#123;S&#125;&#123;condition&#125; &#123;Rd&#125;, Operand1, Operand2</span><br><span class="line">助记符&#123;是否使用CPSR&#125;&#123;是否条件执行以及条件&#125; &#123;目的寄存器&#125;, 操作符1, 操作符2</span><br></pre></td></tr></table></figure><p>由于ARM指令的灵活性，不是全部的指令都满足这个模板，不过大部分都满足了。下面来说说模板中的含义:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">MNEMONIC     - 指令的助记符如ADD</span><br><span class="line">&#123;S&#125;          - 可选的扩展位，如果指令后加了S，则需要依据计算结果更新CPSR寄存器中的条件跳转相关的FLAG</span><br><span class="line">&#123;condition&#125;  - 如果机器码要被条件执行，那它需要满足的条件标示</span><br><span class="line">&#123;Rd&#125;         - 存储结果的目的寄存器</span><br><span class="line">Operand1     - 第一个操作数，寄存器或者是一个立即数</span><br><span class="line">Operand2     - 第二个(可变的)操作数，可以是一个立即数或者寄存器或者有偏移量的寄存器</span><br></pre></td></tr></table></figure><p>当助记符，S，目的寄存器以及第一个操作数都被声明的时候，条件执行以及第二操作数需要一些声明。因为条件执行是依赖于CPSR寄存器的值的，更精确的说是寄存器中的一些比特位。第二操作数是一个可变操作数，因为我们可以以各种形式来使用它，立即数，寄存器，或者有偏移量的寄存器。举例来说，第二操作数还有如下操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#123                    - 立即数</span><br><span class="line">Rx                      - 寄存器比如R1</span><br><span class="line">Rx, ASR n               - 对寄存器中的值进行算术右移n位后的值</span><br><span class="line">Rx, LSL n               - 对寄存器中的值进行逻辑左移n位后的值</span><br><span class="line">Rx, LSR n               - 对寄存器中的值进行逻辑右移n位后的值</span><br><span class="line">Rx, ROR n               - 对寄存器中的值进行循环右移n位后的值</span><br><span class="line">Rx, RRX                 - 对寄存器中的值进行带扩展的循环右移1位后的值</span><br></pre></td></tr></table></figure><p>在知道了这个机器码模板后，然我们试着去理解这些指令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ADD   R0, R1, R2         - 将第一操作数R1的内容与第二操作数R2的内容相加，将结果存储到R0中。</span><br><span class="line">ADD   R0, R1, #2         - 将第一操作数R1的内容与第二操作数一个立即数相加，将结果存到R0中</span><br><span class="line">MOVLE R0, #5             - 当满足条件LE(Less and Equal,小于等于0)将第二操作数立即数5移动到R0中,注意这条指令与MOVLE R0, R0, #5相同</span><br><span class="line">MOV   R0, R1, LSL #1     - 将第一操作数R1寄存器中的值逻辑左移1位后存入R0</span><br></pre></td></tr></table></figure><p>最后我们总结一下，满足这个模板的一些通用ARM指令集以及其含义:</p><table><thead><tr><th>指令</th><th>含义</th><th>指令</th><th>含义</th></tr></thead><tbody><tr><td>MOV</td><td>移动数据</td><td>EOR</td><td>比特位异或</td></tr><tr><td>MVN</td><td>取反码移动数据</td><td>LDR</td><td>加载数据</td></tr><tr><td>ADD</td><td>数据相加</td><td>STR</td><td>存储数据</td></tr><tr><td>SUB</td><td>数据相减</td><td>LDM</td><td>多次加载</td></tr><tr><td>MUL</td><td>数据相乘</td><td>STM</td><td>多次存储</td></tr><tr><td>LSL</td><td>逻辑左移</td><td>PUSH</td><td>压栈</td></tr><tr><td>LSR</td><td>逻辑右移</td><td>POP</td><td>出栈</td></tr><tr><td>ASR</td><td>算术右移</td><td>B</td><td>分支跳转</td></tr><tr><td>ROR</td><td>循环右移</td><td>BL</td><td>链接分支跳转</td></tr><tr><td>CMP</td><td>比较操作</td><td>BX</td><td>分支跳转切换</td></tr><tr><td>AND</td><td>比特位与</td><td>BLX</td><td>链接分支跳转切换</td></tr><tr><td>ORR</td><td>比特位或</td><td>SWI/SVC</td><td>系统调用</td></tr></tbody></table><p>链接：<a href="https://www.jianshu.com/p/ba4f055e99de" target="_blank" rel="noopener">https://www.jianshu.com/p/ba4f055e99de</a></p><h2 id="内存访问相关指令"><a href="#内存访问相关指令" class="headerlink" title="内存访问相关指令"></a>内存访问相关指令</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;Part 1：ARM汇编介绍&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Part 2：数据类型寄存器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Part 3: ARM指令集&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Part 4: 内存相关指令：加载以及存储&lt;/p&gt;
&lt;/li&gt;

      
    
    </summary>
    
      <category term="categories" scheme="http://yoursite.com/categories/categories/"/>
    
    
      <category term="ARM" scheme="http://yoursite.com/tags/ARM/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2019/03/03/hello-world/"/>
    <id>http://yoursite.com/2019/03/03/hello-world/</id>
    <published>2019-03-03T06:49:25.244Z</published>
    <updated>2019-03-12T06:45:17.172Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
</feed>
